Create and Update function.

import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Fingerprint, Upload, User } from 'lucide-react';
import { useEffect, useState } from 'react';
import { toast } from 'sonner';

interface PaymentModalProps {
    isOpen: boolean;
    onClose: () => void;
    mode: 'create' | 'update';
    employeeId?: number;
    initialData?: Partial<EmployeeData>;
}

interface EmployeeData {
    email: string;
    employeeid: string;
    firstname: string;
    middlename: string;
    lastname: string;
    phone: string;
    department: string;
    work_status: string;
    position: string;
    status: string;
    gender: string;
}

const AddPaymentModal = ({ isOpen, onClose, mode, employeeId, initialData }: PaymentModalProps) => {
    const departmentses = ['Human Resources', 'Finance', 'IT', 'Operations', 'Production'];
    const work_statuses = ['Regular', 'Add Crew'];
    const positiones = [
        'Harvester',
        'Accounting',
        'Manager',
        'Supervisor',
        'Driver',
        'Security',
        'Technician',
        'Support Staff',
        'Packer',
        'P&D',
        'Quality Control',
        'Logistics',
        'Warehouse Staff',
        'Maintenance',
        'Field Worker',
    ];
    const statuses = ['Single', 'Married', 'Divorced', 'Widowed', 'Separated'];
    const genderes = ['Male', 'Female'];

    const [email, setEmail] = useState('');
    const [employeeid, setEmployeeId] = useState('');
    const [firstname, setFirstname] = useState('');
    const [middlename, setMiddlename] = useState('');
    const [lastname, setLastname] = useState('');
    const [phone, setPhone] = useState('');
    const [departments, setDepartments] = useState('');
    const [work_status, setWorkStatus] = useState('');
    const [position, setPosition] = useState('');
    const [status, setStatus] = useState('');
    const [gender, setGender] = useState('');
    const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
    const [loading, setLoading] = useState(false);
    const [preview, setPreview] = useState<string>('');
    const [selectedFile, setSelectedFile] = useState<File | null>(null);

    // Load initial data on open/update
    useEffect(() => {
        if (mode === 'update' && initialData) {
            setEmail(initialData.email || '');
            setEmployeeId(initialData.employeeid || '');
            setFirstname(initialData.firstname || '');
            setMiddlename(initialData.middlename || '');
            setLastname(initialData.lastname || '');
            setPhone(initialData.phone || '');
            setDepartments(initialData.department || '');
            setWorkStatus(initialData.work_status || '');
            setPosition(initialData.position || '');
            setStatus(initialData.status || '');
            setGender(initialData.gender || '');
        } else if (mode === 'create') {
            setEmail('');
            setEmployeeId('');
            setFirstname('');
            setMiddlename('');
            setLastname('');
            setPhone('');
            setDepartments('');
            setWorkStatus('');
            setPosition('');
            setStatus('');
            setGender('');
            setPreview('');
            setSelectedFile(null);
        }
    }, [isOpen, mode, initialData]);

    const handleFileSelect = (file: File) => {
        setSelectedFile(file);
        const reader = new FileReader();
        reader.onload = (e) => {
            const result = e.target?.result as string;
            setPreview(result);
        };
        reader.readAsDataURL(file);
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            handleFileSelect(e.target.files[0]);
        }
    };

    const handleProfileImageUpload = () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e) => {
            const file = (e.target as HTMLInputElement).files?.[0];
            if (file) handleFileSelect(file);
        };
        input.click();
    };

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        setLoading(true);

        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        if (!csrfToken) {
            toast.error('CSRF token missing.');
            setLoading(false);
            return;
        }

        const formData = new FormData();
        formData.append('employeeid', employeeid);
        formData.append('firstname', firstname);
        formData.append('middlename', middlename);
        formData.append('lastname', lastname);
        formData.append('department', departments);
        formData.append('position', position);
        formData.append('status', status);
        formData.append('gender', gender);
        formData.append('email', email);
        formData.append('phone', phone);
        formData.append('work_status', work_status.toLowerCase());

        if (selectedFile) formData.append('picture', selectedFile);

        if (mode === 'update') {
            formData.append('_method', 'PUT');
        }

        const url = mode === 'create' ? '/employee' : `/employee/${employeeId}`;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'X-CSRF-TOKEN': csrfToken },
                credentials: 'same-origin',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                toast.success(`${mode === 'create' ? 'Employee added' : 'Employee updated'} successfully!`);
                setTimeout(() => {
                    onClose();
                    window.location.reload();
                }, 1000);
            } else {
                toast.error(result.message || 'Failed to delete employee');
            }
        } catch (error) {
            console.error(error);
            toast.error('An error occurred.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="max-h-[90vh] min-w-2xl overflow-y-auto border-2 border-main shadow-2xl">
                <DialogHeader>
                    <DialogTitle className="text-green-800">{mode === 'create' ? 'Add New Employee' : 'Update Employee'}</DialogTitle>
                </DialogHeader>
                <form onSubmit={handleSubmit} className="space-y-4">
                    {message && (
                        <div className={`rounded p-2 ${message.type === 'success' ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>
                            {message.text}
                        </div>
                    )}
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                        <div>
                            <Label>Employee ID</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Input
                                type="text"
                                placeholder="Enter employee id...."
                                value={employeeid}
                                onChange={(e) => setEmployeeId(e.target.value)}
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>
                        <div>
                            <Label>Firstname</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Input
                                type="text"
                                placeholder="Enter firstname"
                                value={firstname}
                                onChange={(e) => setFirstname(e.target.value)}
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>
                        <div>
                            <Label>Middlename</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Input
                                type="text"
                                placeholder="Enter middlename"
                                value={middlename}
                                onChange={(e) => setMiddlename(e.target.value)}
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>
                        <div>
                            <Label>Lastname</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Input
                                type="text"
                                placeholder="Enter lastname"
                                value={lastname}
                                onChange={(e) => setLastname(e.target.value)}
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>
                        <div>
                            <Label>Email Address</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Input
                                type="email"
                                placeholder="Enter email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                required
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>

                        <div>
                            <Label htmlFor="phone">Phone</Label>
                            <Input
                                id="phone"
                                type="text"
                                placeholder="Enter phone number..."
                                value={phone}
                                onChange={(e) => setPhone(e.target.value)}
                                required
                                className="border-green-300 focus:border-green-500"
                            />
                        </div>

                        <div>
                            <Label htmlFor="gender">Gender</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Select
                                value={gender}
                                onValueChange={(value) => {
                                    console.log('Selected Gender:', value);
                                    setGender(value);
                                }}
                            >
                                <SelectTrigger className="border-green-300 focus:border-green-500">
                                    <SelectValue placeholder="Select Gender" />
                                </SelectTrigger>
                                <SelectContent>
                                    {genderes.map((gend) => (
                                        <SelectItem key={gend} value={gend}>
                                            {gend}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div>
                            <Label htmlFor="work_status">Work Status</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Select
                                value={work_status}
                                onValueChange={(value) => {
                                    console.log('Selected Work Status:', value);
                                    setWorkStatus(value);
                                }}
                            >
                                <SelectTrigger className="border-green-300 focus:border-green-500">
                                    <SelectValue placeholder="Select Work Status" />
                                </SelectTrigger>
                                <SelectContent>
                                    {work_statuses.map((work_stat) => (
                                        <SelectItem key={work_stat} value={work_stat}>
                                            {work_stat}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>

                        <div>
                            <Label htmlFor="departments">Departments</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Select
                                value={departments}
                                onValueChange={(value) => {
                                    console.log('Selected Departments:', value);
                                    setDepartments(value);
                                }}
                            >
                                <SelectTrigger className="border-green-300 focus:border-green-500">
                                    <SelectValue placeholder="Select Departments" />
                                </SelectTrigger>
                                <SelectContent>
                                    {departmentses.map((dept) => (
                                        <SelectItem key={dept} value={dept}>
                                            {dept}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div>
                            <Label htmlFor="positions">Positions</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Select
                                value={position}
                                onValueChange={(value) => {
                                    console.log('Selected Positions:', value);
                                    setPosition(value);
                                }}
                            >
                                <SelectTrigger className="border-green-300 focus:border-green-500">
                                    <SelectValue placeholder="Select Positions" />
                                </SelectTrigger>
                                <SelectContent>
                                    {positiones.map((pos) => (
                                        <SelectItem key={pos} value={pos}>
                                            {pos}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                        <div>
                            <Label htmlFor="status">Status</Label>
                            <span className="ms-2 text-[15px] font-medium text-red-600">*</span>
                            <Select
                                value={status}
                                onValueChange={(value) => {
                                    console.log('Selected Status:', value);
                                    setStatus(value);
                                }}
                            >
                                <SelectTrigger className="border-green-300 focus:border-green-500">
                                    <SelectValue placeholder="Select Status" />
                                </SelectTrigger>
                                <SelectContent>
                                    {statuses.map((stat) => (
                                        <SelectItem key={stat} value={stat}>
                                            {stat}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                    <div className="md:col-span-2">
                        <div className="flex">
                            <Label className="mb-3 flex items-center gap-2">
                                <User className="h-4 w-4 text-green-600" />
                                Profile Image
                                <span className="text-[15px] font-medium text-muted-foreground">(optional)</span>
                            </Label>
                        </div>

                        <input type="file" name="picture" onChange={handleFileChange} className="w-full" accept="image/*" />
                    </div>
                    <div className="space-y-4">
                        <div
                            className="flex cursor-pointer items-center justify-center rounded-lg border-2 border-dashed border-green-300 bg-green-50 p-6 transition-colors hover:bg-green-100"
                            onClick={handleProfileImageUpload}
                        >
                            {preview ? (
                                <div className="mb-3 text-center">
                                    <p className="mb-1 text-sm">Image Preview:</p>
                                    <img
                                        src={preview}
                                        alt="Preview"
                                        className="mx-auto mb-3 h-24 w-24 rounded-full border-2 border-green-300 object-cover"
                                        onError={(e) => {
                                            e.currentTarget.src = `${'User'}&background=22c55e&color=fff`;
                                        }}
                                    />
                                    <p className="font-medium text-green-800">Profile Image Selected</p>
                                    <p className="text-sm text-green-600">Click to change</p>
                                </div>
                            ) : (
                                <div className="text-center">
                                    <div className="mx-auto mb-3 flex h-16 w-16 items-center justify-center rounded-full bg-gray-100">
                                        <User className="h-8 w-8 text-gray-400" />
                                    </div>
                                    <p className="font-medium text-gray-600">No Profile Image</p>
                                    <p className="text-sm text-gray-500">Click to select image</p>
                                </div>
                            )}
                        </div>
                        <div className="flex justify-center">
                            <Button
                                type="button"
                                onClick={handleProfileImageUpload}
                                className="bg-main text-black transition duration-200 ease-in hover:bg-green-300"
                            >
                                <Upload className="mr-2 h-4 w-4" />
                                Upload Profile Image
                            </Button>
                        </div>

                        <div className="md:col-span-2">
                            <Label className="mb-3 flex items-center gap-2">
                                <Fingerprint className="h-4 w-4 text-green-600" />
                                Fingerprint Capture
                            </Label>
                            {/* <FingerprintCapture onCapture={handleFingerprintCapture} captured={null} /> */}
                        </div>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" type="button" onClick={onClose} disabled={loading}>
                            Cancel
                        </Button>
                        <Button type="submit" disabled={loading} className="bg-main font-semibold text-black hover:bg-green-300">
                            {loading ? 'Processing...' : mode === 'create' ? 'Add Employee' : 'Update Employee'}
                        </Button>
                    </DialogFooter>
                </form>{' '}
            </DialogContent>{' '}
        </Dialog>
    );
};

export default AddPaymentModal;
